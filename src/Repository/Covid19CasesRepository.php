<?php

namespace App\Repository;

use App\Entity\Covid19Cases;
use App\Entity\Province;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\Query;
use Doctrine\Persistence\ManagerRegistry;

/**
 * Covid19CasesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Covid19CasesRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Covid19Cases::class);
    }

    public function findAllOrderBy()
    {
        return $this->createQueryBuilder('c')
            ->addOrderBY('c.noOfConfirmedCases', 'DESC')
            ->getQuery()
            ->execute();
    }

    public function totalCases(Province $province = null) {
        $condition = $province === null ? "" : " WHERE total.province = :prov ";
        $query = $this ->getEntityManager()
            ->createQuery('SELECT SUM(total.noOfConfirmedCases) as totalCases, 
            SUM(total.noOfConfirmedCases) - ( COALESCE(SUM(total.noOfRecoveredCases), 0) + COALESCE(SUM(total.noOfDeaths), 0)) as activeCases, 
            SUM(total.noOfRecoveredCases) as totalRecovered, SUM(total.noOfDeaths) as totalDeath FROM App:Covid19Cases total 
             '.$condition);
        if($province)
            $query->setParameter('prov', $province);
        return $query->getResult();
    }

    public function casesByRegion() {
        return $this->getEntityManager()
            ->createQuery("SELECT p.provinceRegion as region, SUM(total.noOfConfirmedCases) as totalCases, 
            SUM(total.noOfConfirmedCases) - ( COALESCE(SUM(total.noOfRecoveredCases), 0) + COALESCE(SUM(total.noOfDeaths), 0)) as activeCases,
            SUM(total.noOfRecoveredCases) as totalRecovered, SUM(total.noOfDeaths) as totalDeath
                     FROM App:Covid19Cases total JOIN total.province p GROUP BY p.provinceRegion
                     ORDER BY totalCases DESC")
            ->getResult(Query::HYDRATE_SCALAR);
    }

    public function selectForMap(int $province = null) {
        $condition = $province === null ? "" : " WHERE p.id = :prov ";
        $query = $this->getEntityManager()
            ->createQuery("SELECT p.id as PCODE, total.noOfConfirmedCases as Cases, 
            total.noOfConfirmedCases - (COALESCE(total.noOfRecoveredCases, 0) + COALESCE(total.noOfDeaths, 0)) as ActiveCases,
            total.noOfRecoveredCases as Recovered, total.noOfDeaths as Death
                     FROM App:Covid19Cases total JOIN total.province p ".$condition);
        if($province)
            $query->setParameter('prov', $province);

        return $query->getResult(Query::HYDRATE_SCALAR);
    }

    public function getLastUpdated() {
        return $this->createQueryBuilder('updated')
            ->select('MAX(updated.lastUpdated) as lastUpdated')
            ->getQuery()
            ->getOneOrNullResult();
    }


}
